diff -ru Python-3.3.5/Lib/platform.py Python-3.3.5-android/Lib/platform.py
--- Python-3.3.5/Lib/platform.py	2014-03-09 09:40:13.000000000 +0100
+++ Python-3.3.5-android/Lib/platform.py	2014-08-04 22:19:36.000000000 +0200
@@ -368,6 +368,63 @@
                               supported_dists=supported_dists,
                               full_distribution_name=0)

+_android_environment_vars = (
+    'ANDROID_ROOT', 'ANDROID_ASSETS', 'ANDROID_DATA',
+    'ANDROID_PROPERTY_WORKSPACE', 'ANDROID_BOOTLOGO')
+_android_version_property = 'ro.build.version.release'
+_android_buildstr_property = 'ro.build.version.full'
+
+def android_version(version='', buildstr=''):
+    """ Attempt to get the Android version number and build string.
+
+        The function checks for the getprop binary to retrieve build info,
+        and falls back to manually reading /system/build.prop if available.
+
+        Returns a (version, buildstr) tuple which defaults to the args given
+        as parameters.
+    """
+    if not any(os.getenv(e) for e in _android_environment_vars):
+        # Probably not on Android...
+        return version, buildstr
+
+    version_obtained = False
+    buildstr_obtained = False
+
+    # Try the 'official' API tool first, since /system/build.prop might
+    # not be the only source for properties.
+    if os.access('/system/bin/getprop', os.X_OK):
+        try:
+            output = subprocess.check_output(['/system/bin/getprop',
+                                              _android_version_property])
+            version = output.decode('ascii').strip()
+            version_obtained = version and True or False
+        except (subprocess.CalledProcessError, UnicodeDecodeError):
+            pass
+
+        try:
+            output = subprocess.check_output(['/system/bin/getprop',
+                                              _android_buildstr_property])
+            buildstr = output.decode('ascii').strip()
+            buildstr_obtained = True
+        except (subprocess.CalledProcessError, UnicodeDecodeError):
+            pass
+    done = version_obtained and buildstr_obtained
+
+    # Fall back to parsing /system/build.prop manually.
+    if not done and os.path.isfile('/system/build.prop'):
+        for line in open('/system/build.prop'):
+            if '=' not in line:
+                continue
+            key, val = line.split('=')[0:2]
+            key = key.strip()
+
+            if not version_obtained and key == _android_version_property:
+                version = val.strip()
+            elif not buildstr_obtained and key == _android_buildstr_property:
+                buildstr = val.strip()
+
+    return version, buildstr
+
 def popen(cmd, mode='r', bufsize=-1):

     """ Portable popen() interface.
diff -ru Python-3.3.5/Lib/subprocess.py Python-3.3.5-android/Lib/subprocess.py
--- Python-3.3.5/Lib/subprocess.py	2014-03-09 09:40:13.000000000 +0100
+++ Python-3.3.5-android/Lib/subprocess.py	2014-08-04 22:19:36.000000000 +0200
@@ -1343,9 +1343,18 @@
                 args = list(args)

             if shell:
-                args = ["/bin/sh", "-c"] + args
                 if executable:
-                    args[0] = executable
+                    main = executable
+                elif os.path.isfile('/bin/sh'):
+                    main = '/bin/sh'
+                else:
+                    import platform
+                    if platform.android_version()[0]:
+                        main = '/system/bin/sh'
+                    else:
+                        raise RuntimeError('Could not find system shell')
+
+                args = [main, "-c"] + args

             if executable is None:
                 executable = args[0]
diff -ru Python-3.3.5/Modules/posixmodule.c Python-3.3.5-android/Modules/posixmodule.c
--- Python-3.3.5/Modules/posixmodule.c	2014-03-09 08:40:28.000000000 +0000
+++ Python-3.3.5-android/Modules/posixmodule.c	2015-02-24 19:57:05.368843433 +0000
@@ -403,6 +403,11 @@
 #endif
 #endif
 
+/* Android doesn't expose AT_EACCESS - manually define it. */
+#if !defined(AT_EACCESS) && defined(__ANDROID__)
+#define AT_EACCESS     0x200
+#endif
+
 
 #ifdef MS_WINDOWS
 static int
diff -ru Python-3.4.2/configure Python-3.4.2-android/configure
--- Python-3.4.2/configure	2015-02-24 23:18:31.000000000 +0100
+++ Python-3.4.2-android/configure	2015-03-01 20:15:02.000000000 +0100
@@ -5406,6 +5406,34 @@
 MULTIARCH=$($CC --print-multiarch 2>/dev/null)
 
 
+# Test if we're running on Android.
+{ $as_echo "$as_me:${as_lineno-$LINENO}: checking if target is Android-based" >&5
+$as_echo_n "checking if target is Android-based... " >&6; }
+cat confdefs.h - <<_ACEOF >conftest.$ac_ext
+/* end confdefs.h.  */
+
+#if __ANDROID__
+yes
+#endif
+
+_ACEOF
+if (eval "$ac_cpp conftest.$ac_ext") 2>&5 |
+  $EGREP "yes" >/dev/null 2>&1; then :
+
+    { $as_echo "$as_me:${as_lineno-$LINENO}: result: yes" >&5
+$as_echo "yes" >&6; }
+    with_android=yes
+
+else
+
+    { $as_echo "$as_me:${as_lineno-$LINENO}: result: no" >&5
+$as_echo "no" >&6; }
+    with_android=no
+
+
+fi
+rm -f conftest*
+
 
 
 { $as_echo "$as_me:${as_lineno-$LINENO}: checking LIBRARY" >&5
diff -ru Python-3.4.2/configure.ac Python-3.4.2-android/configure.ac
--- Python-3.4.2/configure.ac	2015-02-24 23:18:31.000000000 +0100
+++ Python-3.4.2-android/configure.ac	2015-03-01 20:14:54.000000000 +0100
@@ -796,6 +796,21 @@
 MULTIARCH=$($CC --print-multiarch 2>/dev/null)
 AC_SUBST(MULTIARCH)
 
+# Test if we're running on Android.
+AC_MSG_CHECKING(if target is Android-based)
+AC_EGREP_CPP(yes,
+[
+#if __ANDROID__
+yes
+#endif
+], [
+    AC_MSG_RESULT(yes)
+    with_android=yes
+   ], [
+    AC_MSG_RESULT(no)
+    with_android=no
+   ]
+)
 
 AC_SUBST(LIBRARY)
 AC_MSG_CHECKING(LIBRARY)
diff -ru Python-3.4.2/Makefile.pre.in Python-3.4.2-android/Makefile.pre.in
--- Python-3.4.2/Makefile.pre.in	2015-03-04 16:25:36.000000000 +0100
+++ Python-3.4.2-android/Makefile.pre.in	2015-03-04 16:27:27.000000000 +0100
@@ -568,7 +568,7 @@
 	    *\ -s*|s*) quiet="-q";; \
 	    *) quiet="";; \
 	esac; \
-	$(RUNSHARED) CC='$(CC)' LDSHARED='$(BLDSHARED)' OPT='$(OPT)' \
+	$(RUNSHARED) CC='$(CC)' LDSHARED='$(BLDSHARED) -lpython$(LDVERSION)' OPT='$(OPT)' \
 		_TCLTK_INCLUDES='$(TCLTK_INCLUDES)' _TCLTK_LIBS='$(TCLTK_LIBS)' \
 		$(PYTHON_FOR_BUILD) $(srcdir)/setup.py $$quiet build
 
