diff -wuprN Python-3.4.3/Makefile.pre.in ./python-src/Makefile.pre.in
--- Python-3.4.3/Makefile.pre.in	2015-02-25 20:27:45.000000000 +0900
+++ ./python-src/Makefile.pre.in	2015-03-22 10:33:25.257262477 +0900
@@ -749,7 +749,7 @@ $(IO_OBJS): $(IO_H)
 $(GRAMMAR_H): $(GRAMMAR_INPUT) $(PGENSRCS)
 		@$(MKDIR_P) Include
 		$(MAKE) $(PGEN)
-		$(PGEN) $(GRAMMAR_INPUT) $(GRAMMAR_H) $(GRAMMAR_C)
+		$(HOSTPGEN) $(GRAMMAR_INPUT) $(GRAMMAR_H) $(GRAMMAR_C)
 $(GRAMMAR_C): $(GRAMMAR_H) $(GRAMMAR_INPUT) $(PGENSRCS)
 		$(MAKE) $(GRAMMAR_H)
 		touch $(GRAMMAR_C)
diff -wuprN Python-3.4.3/Modules/_localemodule.c ./python-src/Modules/_localemodule.c
--- Python-3.4.3/Modules/_localemodule.c	2015-02-25 20:27:45.000000000 +0900
+++ ./python-src/Modules/_localemodule.c	2015-03-25 06:27:54.572547223 +0900
@@ -134,7 +134,7 @@ static PyObject*
 PyLocale_localeconv(PyObject* self)
 {
     PyObject* result;
-    struct lconv *l;
+    // struct lconv *l;
     PyObject *x;
 
     result = PyDict_New();
@@ -142,7 +142,7 @@ PyLocale_localeconv(PyObject* self)
         return NULL;
 
     /* if LC_NUMERIC is different in the C library, use saved value */
-    l = localeconv();
+    // l = localeconv();
 
     /* hopefully, the localeconv result survives the C library calls
        involved herein */
@@ -158,42 +158,43 @@ PyLocale_localeconv(PyObject* self)
         Py_DECREF(obj); \
     } while (0)
 
-#define RESULT_STRING(s)\
+#define RESULT_STRING(i, s)\
     do { \
-        x = PyUnicode_DecodeLocale(l->s, NULL); \
-        RESULT(#s, x); \
+        x = PyUnicode_DecodeLocale(s, NULL); \
+        RESULT(#i, x); \
     } while (0)
 
-#define RESULT_INT(i)\
+#define RESULT_INT(i, n)\
     do { \
-        x = PyLong_FromLong(l->i); \
+        x = PyLong_FromLong(n); \
         RESULT(#i, x); \
     } while (0)
 
+    // Android => us_EN.UTF-8
     /* Numeric information */
-    RESULT_STRING(decimal_point);
-    RESULT_STRING(thousands_sep);
-    x = copy_grouping(l->grouping);
+    RESULT_STRING(decimal_point, ".");
+    RESULT_STRING(thousands_sep, ",");
+    x = copy_grouping("330");
     RESULT("grouping", x);
 
     /* Monetary information */
-    RESULT_STRING(int_curr_symbol);
-    RESULT_STRING(currency_symbol);
-    RESULT_STRING(mon_decimal_point);
-    RESULT_STRING(mon_thousands_sep);
-    x = copy_grouping(l->mon_grouping);
+    RESULT_STRING(int_curr_symbol, "USD ");
+    RESULT_STRING(currency_symbol, "$");
+    RESULT_STRING(mon_decimal_point, ".");
+    RESULT_STRING(mon_thousands_sep, ",");
+    x = copy_grouping("330");
     RESULT("mon_grouping", x);
 
-    RESULT_STRING(positive_sign);
-    RESULT_STRING(negative_sign);
-    RESULT_INT(int_frac_digits);
-    RESULT_INT(frac_digits);
-    RESULT_INT(p_cs_precedes);
-    RESULT_INT(p_sep_by_space);
-    RESULT_INT(n_cs_precedes);
-    RESULT_INT(n_sep_by_space);
-    RESULT_INT(p_sign_posn);
-    RESULT_INT(n_sign_posn);
+    RESULT_STRING(positive_sign, "");
+    RESULT_STRING(negative_sign, "-");
+    RESULT_INT(int_frac_digits, 2);
+    RESULT_INT(frac_digits, 2);
+    RESULT_INT(p_cs_precedes, 1);
+    RESULT_INT(p_sep_by_space, 0);
+    RESULT_INT(n_cs_precedes, 1);
+    RESULT_INT(n_sep_by_space, 0);
+    RESULT_INT(p_sign_posn, 1);
+    RESULT_INT(n_sign_posn, 1);
     return result;
 
   failed:
diff -wuprN Python-3.4.3/Modules/pwdmodule.c ./python-src/Modules/pwdmodule.c
--- Python-3.4.3/Modules/pwdmodule.c	2015-02-25 20:27:46.000000000 +0900
+++ ./python-src/Modules/pwdmodule.c	2015-03-25 05:53:17.338370738 +0900
@@ -72,7 +72,7 @@ mkpwent(struct passwd *p)
     SETS(setIndex++, p->pw_passwd);
     PyStructSequence_SET_ITEM(v, setIndex++, _PyLong_FromUid(p->pw_uid));
     PyStructSequence_SET_ITEM(v, setIndex++, _PyLong_FromGid(p->pw_gid));
-    SETS(setIndex++, p->pw_gecos);
+    SETS(setIndex++, "");
     SETS(setIndex++, p->pw_dir);
     SETS(setIndex++, p->pw_shell);
 
diff -wuprN Python-3.4.3/Python/formatter_unicode.c ./python-src/Python/formatter_unicode.c
--- Python-3.4.3/Python/formatter_unicode.c	2015-02-25 20:27:46.000000000 +0900
+++ ./python-src/Python/formatter_unicode.c	2015-03-24 07:04:07.271209532 +0900
@@ -667,20 +667,19 @@ get_locale_info(int type, LocaleInfo *lo
 {
     switch (type) {
     case LT_CURRENT_LOCALE: {
-        struct lconv *locale_data = localeconv();
         locale_info->decimal_point = PyUnicode_DecodeLocale(
-                                         locale_data->decimal_point,
+                                         ".",
                                          NULL);
         if (locale_info->decimal_point == NULL)
             return -1;
         locale_info->thousands_sep = PyUnicode_DecodeLocale(
-                                         locale_data->thousands_sep,
+                                         ",",
                                          NULL);
         if (locale_info->thousands_sep == NULL) {
             Py_DECREF(locale_info->decimal_point);
             return -1;
         }
-        locale_info->grouping = locale_data->grouping;
+        locale_info->grouping = "\3";
         break;
     }
     case LT_DEFAULT_LOCALE:
diff -wuprN Python-3.4.3/Python/pystrtod.c ./python-src/Python/pystrtod.c
--- Python-3.4.3/Python/pystrtod.c	2015-02-25 20:27:46.000000000 +0900
+++ ./python-src/Python/pystrtod.c	2015-03-24 07:03:50.062865908 +0900
@@ -165,7 +165,6 @@ _PyOS_ascii_strtod(const char *nptr, cha
 {
     char *fail_pos;
     double val;
-    struct lconv *locale_data;
     const char *decimal_point;
     size_t decimal_point_len;
     const char *p, *decimal_point_pos;
@@ -177,8 +176,7 @@ _PyOS_ascii_strtod(const char *nptr, cha
 
     fail_pos = NULL;
 
-    locale_data = localeconv();
-    decimal_point = locale_data->decimal_point;
+    decimal_point = ".";
     decimal_point_len = strlen(decimal_point);
 
     assert(decimal_point_len != 0);
@@ -378,8 +376,7 @@ PyOS_string_to_double(const char *s,
 Py_LOCAL_INLINE(void)
 change_decimal_from_locale_to_dot(char* buffer)
 {
-    struct lconv *locale_data = localeconv();
-    const char *decimal_point = locale_data->decimal_point;
+    const char *decimal_point = ".";
 
     if (decimal_point[0] != '.' || decimal_point[1] != 0) {
         size_t decimal_point_len = strlen(decimal_point);
diff -wuprn python-3.4.3/config.site ./python-src/config.site
--- python-3.4.3/config.site	1970-01-01 09:00:00.000000000 +0900
+++ ./python-src/config.site	2015-03-24 06:20:33.685727684 +0900
@@ -0,0 +1,3 @@
+ac_cv_file__dev_ptmx=no
+ac_cv_file__dev_ptc=no
+
diff -wuprn python-3.4.3/configure ./python-src/configure
--- python-3.4.3/configure	2015-02-25 20:27:46.000000000 +0900
+++ ./python-src/configure	2015-03-24 06:08:09.118205440 +0900
@@ -12076,24 +12076,9 @@ fi
 fi
 
 fi
-
 { $as_echo "$as_me:${as_lineno-$LINENO}: result: $ac_cv_buggy_getaddrinfo" >&5
 $as_echo "$ac_cv_buggy_getaddrinfo" >&6; }
-
-if test $have_getaddrinfo = no || test "$ac_cv_buggy_getaddrinfo" = yes
-then
-	if test $ipv6 = yes
-	then
-		echo 'Fatal: You must get working getaddrinfo() function.'
-		echo '       or you can specify "--disable-ipv6"'.
-		exit 1
-	fi
-else
-
 $as_echo "#define HAVE_GETADDRINFO 1" >>confdefs.h
-
-fi
-
 for ac_func in getnameinfo
 do :
   ac_fn_c_check_func "$LINENO" "getnameinfo" "ac_cv_func_getnameinfo"
@@ -13540,7 +13526,7 @@ $as_echo_n "checking for broken sem_getv
 if ${ac_cv_broken_sem_getvalue+:} false; then :
   $as_echo_n "(cached) " >&6
 else
-  if test "$cross_compiling" = yes; then :
+  if test "$cross_compiling" = no; then :
   ac_cv_broken_sem_getvalue=yes
 else
   cat confdefs.h - <<_aceof >conftest.$ac_ext
--- Python-3.4.3/Modules/Setup.dist	2015-02-25 20:27:45.000000000 +0900
+++ python-src/Modules/Setup.dist	2015-03-26 02:00:25.209782940 +0900
@@ -162,7 +162,7 @@
 # it, depending on your system -- see the GNU readline instructions.
 # It's okay for this to be a shared library, too.
 
-#readline readline.c -lreadline -ltermcap
+readline readline.c -lreadline
 
 
 # Modules that should always be present (non UNIX dependent):
@@ -204,10 +204,10 @@
 
 # Socket module helper for SSL support; you must comment out the other
 # socket line above, and possibly edit the SSL variable:
-#SSL=/usr/local/ssl
-#_ssl _ssl.c \
-#	-DUSE_SSL -I$(SSL)/include -I$(SSL)/include/openssl \
-#	-L$(SSL)/lib -lssl -lcrypto
+SSL=../openssl/.build_$(ARCH)
+_ssl _ssl.c \
+	-DUSE_SSL -I$(SSL)/include -I$(SSL)/include/openssl \
+	-L$(SSL)/lib -lssl -lcrypto
 
 # The crypt module is now disabled by default because it breaks builds
 # on many systems (where -lcrypt is needed), e.g. Linux (I believe).
@@ -303,7 +303,8 @@
 #
 # First, look at Setup.config; configure may have set this for you.
 
-#_curses _cursesmodule.c -lcurses -ltermcap
+_curses _cursesmodule.c -lncurses \
+    -L../ncurses-5.9/lib -I../ncurses-5.9/include
 # Wrapper for the panel library that's part of ncurses and SYSV curses.
 #_curses_panel _curses_panel.c -lpanel -lncurses
 
@@ -358,7 +359,7 @@
 # Andrew Kuchling's zlib module.
 # This require zlib 1.1.3 (or later).
 # See http://www.gzip.org/zlib/
-#zlib zlibmodule.c -I$(prefix)/include -L$(exec_prefix)/lib -lz
+zlib zlibmodule.c -lz
 
 # Interface to the Expat XML parser
 #
--- Python-3.4.3/Modules/python.c	2015-02-25 20:27:46.000000000 +0900
+++ python-src/Modules/python.c	2015-03-29 06:43:32.649166816 +0900
@@ -44,7 +44,7 @@
     fpsetmask(m & ~FP_X_OFL);
 #endif

-    oldloc = _PyMem_RawStrdup(setlocale(LC_ALL, NULL));
+    oldloc = _PyMem_RawStrdup("C");
     if (!oldloc) {
         fprintf(stderr, "out of memory\n");
         return 1;
--- Python-3.4.3/Python/frozenmain.c	2015-02-25 20:27:46.000000000 +0900
+++ python-src/Python/frozenmain.c	2015-03-29 06:44:01.569082892 +0900
@@ -44,7 +44,7 @@
         setbuf(stderr, (char *)NULL);
     }

-    oldloc = _PyMem_RawStrdup(setlocale(LC_ALL, NULL));
+    oldloc = _PyMem_RawStrdup("C");
     if (!oldloc) {
         fprintf(stderr, "out of memory\n");
         goto error;
--- Python-3.4.3/Modules/main.c	2015-02-25 20:27:46.000000000 +0900
+++ python-src/Modules/main.c	2015-03-29 06:43:44.308729813 +0900
@@ -537,7 +537,7 @@
             Py_FatalError(
                "not enough memory to copy PYTHONWARNINGS");
         strcpy(buf, p);
-        oldloc = _PyMem_RawStrdup(setlocale(LC_ALL, NULL));
+        oldloc = _PyMem_RawStrdup("C");
         setlocale(LC_ALL, "");
         for (p = strtok(buf, ","); p != NULL; p = strtok(NULL, ",")) {
 #ifdef __APPLE__
